# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import files_pb2 as files__pb2


class FileManagerStub(object):
    """El servicio de manejo de archivos
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendFile = channel.unary_unary(
                '/filemanagement.FileManager/SendFile',
                request_serializer=files__pb2.FileRequest.SerializeToString,
                response_deserializer=files__pb2.FileResponse.FromString,
                )
        self.ListFiles = channel.unary_unary(
                '/filemanagement.FileManager/ListFiles',
                request_serializer=files__pb2.ListFilesRequest.SerializeToString,
                response_deserializer=files__pb2.ListFilesResponse.FromString,
                )
        self.ReplicateFile = channel.unary_unary(
                '/filemanagement.FileManager/ReplicateFile',
                request_serializer=files__pb2.ReplicateFileRequest.SerializeToString,
                response_deserializer=files__pb2.FileResponse.FromString,
                )
        self.DownloadFile = channel.unary_unary(
                '/filemanagement.FileManager/DownloadFile',
                request_serializer=files__pb2.DownloadRequest.SerializeToString,
                response_deserializer=files__pb2.DownloadResponse.FromString,
                )


class FileManagerServicer(object):
    """El servicio de manejo de archivos
    """

    def SendFile(self, request, context):
        """Env√≠a un archivo al servidor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFiles(self, request, context):
        """Obtiene la lista de archivos disponibles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateFile(self, request, context):
        """Replica un archivo a los puertos especificados
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFile(self, request, context):
        """Descargar un archivo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFile,
                    request_deserializer=files__pb2.FileRequest.FromString,
                    response_serializer=files__pb2.FileResponse.SerializeToString,
            ),
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=files__pb2.ListFilesRequest.FromString,
                    response_serializer=files__pb2.ListFilesResponse.SerializeToString,
            ),
            'ReplicateFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateFile,
                    request_deserializer=files__pb2.ReplicateFileRequest.FromString,
                    response_serializer=files__pb2.FileResponse.SerializeToString,
            ),
            'DownloadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=files__pb2.DownloadRequest.FromString,
                    response_serializer=files__pb2.DownloadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'filemanagement.FileManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileManager(object):
    """El servicio de manejo de archivos
    """

    @staticmethod
    def SendFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filemanagement.FileManager/SendFile',
            files__pb2.FileRequest.SerializeToString,
            files__pb2.FileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filemanagement.FileManager/ListFiles',
            files__pb2.ListFilesRequest.SerializeToString,
            files__pb2.ListFilesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReplicateFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filemanagement.FileManager/ReplicateFile',
            files__pb2.ReplicateFileRequest.SerializeToString,
            files__pb2.FileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filemanagement.FileManager/DownloadFile',
            files__pb2.DownloadRequest.SerializeToString,
            files__pb2.DownloadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
